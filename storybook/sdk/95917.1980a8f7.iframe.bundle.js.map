{"version":3,"file":"95917.1980a8f7.iframe.bundle.js","mappings":";;;;;;;;;;;AAkCA;;;;;;;;AASA;;;;;;;;;;;;AAaA;;;;AAwBA;;;AAGA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;;;;;;;AASA;;AAEA;AACA;AACA;;;AAGA;;;;;AAKA;;AAEA;;;;AAIA;;;;;;;;AC3EA;AAGA;;;;;;;;;;;;;AAaA;;;;AAIA;;;;AAIA;;AAGA;;;;;;;;;;;;AAYA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;;AAvFA;;;;;;AAOA;AACA;;;AAGA;;;AAGA;;AAEA;;;;;;AASA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACNA;AAKA;;AAEA;AAEA;;AAEA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;AAGA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAGA;AAIA;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAKA;AAUA;AACA;;AAEA;AAEA;AACA;AACA;;;AAKA;;AC7JA;;;;;AAOA;;;;;;;;;;;ACDA;;;;;;AAQA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;AAOA;AChGA;AACA;AACA;;AAEA;;;;AAMA;ACHA;AACA;;;;;;AAMA;;AAEA;;;AAGA;;;AAGA;AAEA;;;AAGA;AAEA;;AAIA;;ACnCA;;AAEA;;AAIA;;;;;AAQA;AACA;;;;AAIA;;;;;;;;;AASA;AACA;AACA;;AAEA;;;;;;;;;;AAWA;;;;;;AAMA;;;;AAOA;AAGA;AACA;AACA;AAEA;AAEA;;;;;AAKA;;;;;;;;;AASA;AACA;AACA;;;AAIA;AACA;;;AAGA;;;;;;;;;;AAWA;;;;;AAKA;;;;;AAQA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;AAQA;;AAEA;;AAEA;;;;;AAMA;;;;;AAMA;;;;AAKA;;;;;;;;AAQA;;;AAKA;AAOA;AACA;AACA;AAGA;AAGA;;;;AAKA;AAEA;;AAIA;ACtMA;AACA;AACA;AAGA;;;;;;;;;;ACcA;AAEA;AACA;;;AAGA;AAEA;AACA;;;AAGA;AAEA;AACA;;;AAGA;;;;AAOA;AAKA;AACA;;;;;AAKA;AAEA;AACA;;;AAGA;AAEA;AACA;;;AAGA;AAEA;AACA;;;AAGA;;;;;AAMA;AAEA;;;AAGA;;;;AAKA;;;;;;;;AAUA;;;;ACtGA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;AAKA;;;;;;;AAOA;;AASA;;;;;AAuBA;AACA;AACA;AACA;;;;AAIA;AAEA;;;AAGA;AAEA;;;;;;;AAOA;AAEA;AACA;;;;AAIA;;AAEA;AAEA;AACA;;;AAGA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;;;;;;AAQA;AAEA;AACA;AACA;;;;AAIA;;;;;;AAMA;AACA;;;AAKA;AAEA;AACA;AACA;AACA;;;;AAIA;;;;;;AAMA;AACA;AACA;;;AAKA;AAEA;AACA;AACA;;;;AAIA;;;;AAKA;AACA;AACA;AACA;;;;;;;AAOA;AAEA;AACA;AACA;;;;;;AAMA;;;;AAKA;AACA;AACA;AACA;;;;;;;AAOA;AAEA;AACA;AACA;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAEA;;;;;AAKA;;;;AAIA;AAEA;;;;AAIA;;;;AAMA;;;;;;;;;;;;AAgBA;;;AAIA;AAEA;;;AAGA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;AC/RA;;AAGA;ACZA;;;AAOA;ACwBA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;AAUA;AC7CA;;;AAIA;;;AAKA;ACCA;AACA;;AAEA;AAEA;;AAGA;;;;;AASA;;;AAGA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;;;AAUA;AACA;;AAIA;;;;;;;AASA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;;;AAKA;;;;AAKA;;;;AAKA;;;;;ACzFA;AACA;;;;;;;AAOA;;AAGA;;;;;;AAQA;AACA;AACA;;AAEA;AACA;;AAIA;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;;AAKA;;AAIA;;;;;AAQA;;;;;;;;AChEA;;;;;;;;;;;;;;;AA8BA;AAqBA;AACA;AA+BA;AACA","sources":["webpack://react-sdk/./node_modules/@mui/material/ButtonBase/TouchRipple.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/styles/GlobalStyle.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Flex/Flex.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Modal/DockedModals.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Popover/Popover.styles.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Tooltip/Tooltip.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Backdrop/Backdrop.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Progress.styles.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Text/Text.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Icon/Icon.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Button/Button.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Button/BareButton.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/VisuallyHiddenText/VisuallyHiddenText.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Keyboard.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Fullscreen/Fullscreen.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Link/Link.js","webpack://react-sdk/./node_modules/@pega/cosmos-react-core/lib/components/Toaster/Toaster.js","webpack://react-sdk/./node_modules/@mui/material/CircularProgress/CircularProgress.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"center\", \"classes\", \"className\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { keyframes } from '@mui/system';\nimport useTimeout from '@mui/utils/useTimeout';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Ripple from './Ripple';\nimport touchRippleClasses from './touchRippleClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DURATION = 550;\nexport const DELAY_RIPPLE = 80;\nconst enterKeyframe = keyframes(_t || (_t = _`\n  0% {\n    transform: scale(0);\n    opacity: 0.1;\n  }\n\n  100% {\n    transform: scale(1);\n    opacity: 0.3;\n  }\n`));\nconst exitKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n`));\nconst pulsateKeyframe = keyframes(_t3 || (_t3 = _`\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(0.92);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`));\nexport const TouchRippleRoot = styled('span', {\n  name: 'MuiTouchRipple',\n  slot: 'Root'\n})({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  position: 'absolute',\n  zIndex: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  borderRadius: 'inherit'\n});\n\n// This `styled()` function invokes keyframes. `styled-components` only supports keyframes\n// in string templates. Do not convert these styles in JS object as it will break.\nexport const TouchRippleRipple = styled(Ripple, {\n  name: 'MuiTouchRipple',\n  slot: 'Ripple'\n})(_t4 || (_t4 = _`\n  opacity: 0;\n  position: absolute;\n\n  &.${0} {\n    opacity: 0.3;\n    transform: scale(1);\n    animation-name: ${0};\n    animation-duration: ${0}ms;\n    animation-timing-function: ${0};\n  }\n\n  &.${0} {\n    animation-duration: ${0}ms;\n  }\n\n  & .${0} {\n    opacity: 1;\n    display: block;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: currentColor;\n  }\n\n  & .${0} {\n    opacity: 0;\n    animation-name: ${0};\n    animation-duration: ${0}ms;\n    animation-timing-function: ${0};\n  }\n\n  & .${0} {\n    position: absolute;\n    /* @noflip */\n    left: 0px;\n    top: 0;\n    animation-name: ${0};\n    animation-duration: 2500ms;\n    animation-timing-function: ${0};\n    animation-iteration-count: infinite;\n    animation-delay: 200ms;\n  }\n`), touchRippleClasses.rippleVisible, enterKeyframe, DURATION, ({\n  theme\n}) => theme.transitions.easing.easeInOut, touchRippleClasses.ripplePulsate, ({\n  theme\n}) => theme.transitions.duration.shorter, touchRippleClasses.child, touchRippleClasses.childLeaving, exitKeyframe, DURATION, ({\n  theme\n}) => theme.transitions.easing.easeInOut, touchRippleClasses.childPulsate, pulsateKeyframe, ({\n  theme\n}) => theme.transitions.easing.easeInOut);\n\n/**\n * @ignore - internal component.\n *\n * TODO v5: Make private\n */\nconst TouchRipple = /*#__PURE__*/React.forwardRef(function TouchRipple(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTouchRipple'\n  });\n  const {\n      center: centerProp = false,\n      classes = {},\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [ripples, setRipples] = React.useState([]);\n  const nextKey = React.useRef(0);\n  const rippleCallback = React.useRef(null);\n  React.useEffect(() => {\n    if (rippleCallback.current) {\n      rippleCallback.current();\n      rippleCallback.current = null;\n    }\n  }, [ripples]);\n\n  // Used to filter out mouse emulated events on mobile.\n  const ignoringMouseDown = React.useRef(false);\n  // We use a timer in order to only show the ripples for touch \"click\" like events.\n  // We don't want to display the ripple for touch scroll events.\n  const startTimer = useTimeout();\n\n  // This is the hook called once the previous timeout is ready.\n  const startTimerCommit = React.useRef(null);\n  const container = React.useRef(null);\n  const startCommit = React.useCallback(params => {\n    const {\n      pulsate,\n      rippleX,\n      rippleY,\n      rippleSize,\n      cb\n    } = params;\n    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/_jsx(TouchRippleRipple, {\n      classes: {\n        ripple: clsx(classes.ripple, touchRippleClasses.ripple),\n        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses.rippleVisible),\n        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses.ripplePulsate),\n        child: clsx(classes.child, touchRippleClasses.child),\n        childLeaving: clsx(classes.childLeaving, touchRippleClasses.childLeaving),\n        childPulsate: clsx(classes.childPulsate, touchRippleClasses.childPulsate)\n      },\n      timeout: DURATION,\n      pulsate: pulsate,\n      rippleX: rippleX,\n      rippleY: rippleY,\n      rippleSize: rippleSize\n    }, nextKey.current)]);\n    nextKey.current += 1;\n    rippleCallback.current = cb;\n  }, [classes]);\n  const start = React.useCallback((event = {}, options = {}, cb = () => {}) => {\n    const {\n      pulsate = false,\n      center = centerProp || options.pulsate,\n      fakeElement = false // For test purposes\n    } = options;\n    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {\n      ignoringMouseDown.current = false;\n      return;\n    }\n    if ((event == null ? void 0 : event.type) === 'touchstart') {\n      ignoringMouseDown.current = true;\n    }\n    const element = fakeElement ? null : container.current;\n    const rect = element ? element.getBoundingClientRect() : {\n      width: 0,\n      height: 0,\n      left: 0,\n      top: 0\n    };\n\n    // Get the size of the ripple\n    let rippleX;\n    let rippleY;\n    let rippleSize;\n    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {\n      rippleX = Math.round(rect.width / 2);\n      rippleY = Math.round(rect.height / 2);\n    } else {\n      const {\n        clientX,\n        clientY\n      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;\n      rippleX = Math.round(clientX - rect.left);\n      rippleY = Math.round(clientY - rect.top);\n    }\n    if (center) {\n      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);\n\n      // For some reason the animation is broken on Mobile Chrome if the size is even.\n      if (rippleSize % 2 === 0) {\n        rippleSize += 1;\n      }\n    } else {\n      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;\n      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;\n      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);\n    }\n\n    // Touche devices\n    if (event != null && event.touches) {\n      // check that this isn't another touchstart due to multitouch\n      // otherwise we will only clear a single timer when unmounting while two\n      // are running\n      if (startTimerCommit.current === null) {\n        // Prepare the ripple effect.\n        startTimerCommit.current = () => {\n          startCommit({\n            pulsate,\n            rippleX,\n            rippleY,\n            rippleSize,\n            cb\n          });\n        };\n        // Delay the execution of the ripple effect.\n        // We have to make a tradeoff with this delay value.\n        startTimer.start(DELAY_RIPPLE, () => {\n          if (startTimerCommit.current) {\n            startTimerCommit.current();\n            startTimerCommit.current = null;\n          }\n        });\n      }\n    } else {\n      startCommit({\n        pulsate,\n        rippleX,\n        rippleY,\n        rippleSize,\n        cb\n      });\n    }\n  }, [centerProp, startCommit, startTimer]);\n  const pulsate = React.useCallback(() => {\n    start({}, {\n      pulsate: true\n    });\n  }, [start]);\n  const stop = React.useCallback((event, cb) => {\n    startTimer.clear();\n\n    // The touch interaction occurs too quickly.\n    // We still want to show ripple effect.\n    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {\n      startTimerCommit.current();\n      startTimerCommit.current = null;\n      startTimer.start(0, () => {\n        stop(event, cb);\n      });\n      return;\n    }\n    startTimerCommit.current = null;\n    setRipples(oldRipples => {\n      if (oldRipples.length > 0) {\n        return oldRipples.slice(1);\n      }\n      return oldRipples;\n    });\n    rippleCallback.current = cb;\n  }, [startTimer]);\n  React.useImperativeHandle(ref, () => ({\n    pulsate,\n    start,\n    stop\n  }), [pulsate, start, stop]);\n  return /*#__PURE__*/_jsx(TouchRippleRoot, _extends({\n    className: clsx(touchRippleClasses.root, classes.root, className),\n    ref: container\n  }, other, {\n    children: /*#__PURE__*/_jsx(TransitionGroup, {\n      component: null,\n      exit: true,\n      children: ripples\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TouchRipple.propTypes = {\n  /**\n   * If `true`, the ripple starts at the center of the component\n   * rather than at the point of interaction.\n   */\n  center: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default TouchRipple;","import { mix } from 'polished';\nimport { createGlobalStyle, css } from 'styled-components';\nimport { calculateFontSize } from './utils';\nexport const globalSpacingStyles = css `\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n`;\nexport const createGlobalRootStyles = ({ base: { scale, 'hit-area': hitArea } }) => {\n    return css `\n    :root,\n    :host {\n      height: 100%;\n      -webkit-text-size-adjust: 100%;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      font-size: calc(${scale} * 1rem);\n      --hit-area: ${hitArea.compact};\n\n      @media (pointer: coarse) {\n        --hit-area: ${hitArea.finger};\n      }\n    }\n  `.join('');\n};\nexport const createGlobalBodyStyles = ({ base: { 'font-size': baseFontSize, 'font-scale': baseFontScale, 'font-family': fontFamily, palette: { 'foreground-color': foregroundColor }, 'line-height': lineHeight }, components: { text } }) => {\n    // Can't call a hook here\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    return css `\n    body,\n    :host {\n      min-height: 100%;\n      margin: 0;\n      padding: 0;\n      font-size: ${fontSize[text.primary['font-size']]};\n      font-family: ${fontFamily};\n      color: ${foregroundColor};\n      line-height: ${lineHeight};\n    }\n  `.join('');\n};\nexport default createGlobalStyle(({ theme }) => {\n    const { base: { 'custom-scrollbar': customScrollbar, 'border-radius': borderRadius, palette: { 'foreground-color': foreground, 'scrollbar-track': scrollbarTrack, 'scrollbar-thumb': scrollbarThumb, 'scrollbar-thumb-hover': scrollbarThumbHover }, shadow: { focus }, transparency: { 'transparent-3': transparent } }, components: { 'form-control': { 'background-color': backgroundColor } } } = theme;\n    return css `\n    ${globalSpacingStyles}\n\n    body {\n      overscroll-behavior: none;\n    }\n\n    h1:focus-visible,\n    h2:focus-visible,\n    h3:focus-visible,\n    h4:focus-visible,\n    h5:focus-visible,\n    h6:focus-visible {\n      outline: transparent;\n      box-shadow: ${focus};\n    }\n\n    ::placeholder {\n      color: ${mix(transparent, foreground, backgroundColor)};\n      opacity: unset;\n    }\n\n    ${customScrollbar &&\n        css `\n      * {\n        scrollbar-color: ${scrollbarThumb} ${scrollbarTrack};\n        scrollbar-width: thin;\n      }\n\n      @supports not ((scrollbar-width: thin) or (scrollbar-color: black white)) {\n        /* stylelint-disable unit-allowed-list */\n        *::-webkit-scrollbar {\n          width: 12px;\n          height: 12px;\n        }\n\n        *::-webkit-scrollbar-track {\n          background-color: ${scrollbarTrack};\n        }\n\n        *::-webkit-scrollbar-corner {\n          background-color: ${scrollbarTrack};\n          border-bottom-right-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-thumb {\n          background-color: transparent;\n          border: 3px solid transparent;\n          border-radius: calc(1.125 * ${borderRadius});\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumb};\n        }\n\n        *::-webkit-scrollbar-thumb:hover {\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumbHover};\n        }\n\n        *::-webkit-scrollbar-track:horizontal {\n          border-bottom-left-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-track:vertical {\n          border-top-right-radius: inherit;\n        }\n\n        /* stylelint-disable-next-line selector-pseudo-class-no-unknown */\n        *::-webkit-scrollbar-track:not(:corner-present) {\n          border-bottom-right-radius: inherit;\n        }\n        /* stylelint-enable unit-allowed-list */\n      }\n    `}\n\n    ${createGlobalRootStyles(theme)}\n\n      ${createGlobalBodyStyles(theme)}\n\n      input,\n      button,\n      select,\n      optgroup,\n      textarea {\n      margin: 0;\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n    }\n  `;\n});\n//# sourceMappingURL=GlobalStyle.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    if (['start', 'end'].includes(value))\n        return `flex-${value}`;\n    return value;\n};\nconst getLogicalPadding = (pad) => {\n    if (!Array.isArray(pad)) {\n        return [pad, pad, pad, pad];\n    }\n    switch (pad.length) {\n        case 1:\n            return [pad[0], pad[0], pad[0], pad[0]];\n        case 2:\n            return [pad[0], pad[1], pad[0], pad[1]];\n        case 3:\n            return [pad[0], pad[1], pad[2], pad[1]];\n        case 4:\n            return pad;\n        default:\n            return [undefined, undefined, undefined, undefined];\n    }\n};\nconst getContainerStyles = (container, spacing) => {\n    if (!container)\n        return '';\n    if (container === true) {\n        return css `\n      display: flex;\n    `;\n    }\n    const paddingConfig = getLogicalPadding(container.pad);\n    if (container && typeof container === 'object') {\n        const isRow = !container.direction || container.direction.includes('row');\n        const isReverse = container.direction && container.direction.includes('reverse');\n        return css `\n      display: ${container.inline ? 'inline-flex' : 'flex'};\n\n      ${paddingConfig[0] !== undefined &&\n            css `\n        padding-block-start: calc(${paddingConfig[0]} * ${spacing});\n      `}\n      ${paddingConfig[1] !== undefined &&\n            css `\n        padding-inline-end: calc(${paddingConfig[1]} * ${spacing});\n      `}\n\n        ${paddingConfig[2] !== undefined &&\n            css `\n        padding-block-end: calc(${paddingConfig[2]} * ${spacing});\n      `}\n\n        ${paddingConfig[3] !== undefined &&\n            css `\n        padding-inline-start: calc(${paddingConfig[3]} * ${spacing});\n      `}\n\n      ${container.direction &&\n            css `\n        flex-direction: ${container.direction};\n      `}\n\n      ${container.justify &&\n            css `\n        justify-content: ${prefix(container.justify)};\n      `}\n\n      ${container.wrap &&\n            css `\n        flex-wrap: ${container.wrap};\n      `}\n\n      ${container.alignItems &&\n            css `\n        align-items: ${prefix(container.alignItems)};\n      `}\n\n      ${container.alignContent &&\n            css `\n        align-content: ${prefix(container.alignContent)};\n      `}\n\n      ${container.itemGap &&\n            css `\n          > * {\n            margin-${isRow ? 'inline-start' : 'block-start'}: calc(${container.itemGap} * ${props => props.theme.base.spacing});\n            ${isReverse ? ':last-child' : ':first-child'} {\n              margin-${isRow ? 'inline-start' : 'block-start'}: 0;\n            }\n          }\n        `}\n\n      ${container.gap !== undefined &&\n            css `\n        gap: calc(${container.gap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.colGap !== undefined &&\n            css `\n        column-gap: calc(${container.colGap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.rowGap !== undefined &&\n            css `\n        row-gap: calc(${container.rowGap} * ${props => props.theme.base.spacing});\n      `}\n    `;\n    }\n};\nconst getItemStyles = (item) => {\n    return css `\n    ${item &&\n        css `\n      max-width: 100%;\n      min-width: 0;\n\n      ${item.grow !== undefined &&\n            css `\n        flex-grow: ${item.grow};\n      `}\n\n      ${item.shrink !== undefined &&\n            css `\n        flex-shrink: ${item.shrink};\n      `}\n\n      ${item.alignSelf &&\n            css `\n        align-self: ${prefix(item.alignSelf)};\n      `}\n\n      ${item.basis &&\n            css `\n        flex-basis: ${item.basis};\n      `}\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledFlex = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints, spacing } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container, spacing)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container, spacing)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledFlex.defaultProps = defaultThemeProp;\nconst Flex = forwardRef(function Flex(props, ref) {\n    return _jsx(StyledFlex, { ...props, ref: ref });\n});\nexport default Flex;\n//# sourceMappingURL=Flex.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nconst StyledDockedModals = styled.div(({ theme }) => {\n    return css `\n    position: fixed;\n    z-index: ${theme.base['z-index'].modal};\n    bottom: 0;\n    right: 0;\n    pointer-events: none;\n    width: 100%;\n  `;\n});\nStyledDockedModals.defaultProps = defaultThemeProp;\nconst DockedModals = forwardRef(function DockedModals(props, ref) {\n    return (_jsx(Flex, { container: { justify: 'end', alignItems: 'end', gap: 2, pad: [0, 2] }, as: StyledDockedModals, ...props, ref: ref }));\n});\nexport default DockedModals;\n//# sourceMappingURL=DockedModals.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledPopoverArrow = styled.div `\n  background-color: inherit;\n\n  ::before {\n    content: '';\n    display: block;\n    position: absolute;\n    inset: -0.25rem;\n    background-color: inherit;\n    transform: rotate(45deg);\n  }\n`;\nStyledPopoverArrow.defaultProps = defaultThemeProp;\nexport const StyledPopover = styled.div(({ theme: { base: { 'border-radius': borderRadius, 'z-index': { popover: popoverZIndex, backdrop: backdropZIndex }, shadow: { high }, palette }, components: { card: { background }, 'form-control': { 'border-radius': formControlBorderRadius } } }, portal, offset }) => {\n    return css `\n      /*\n        Margin should never be used with Popper.\n        https://popper.js.org/docs/v2/migration-guide/#4-remove-all-css-margins\n      */\n      margin: 0 !important;\n      z-index: ${portal ? backdropZIndex - 1 : popoverZIndex};\n      background-color: ${background};\n      border-radius: calc(${formControlBorderRadius} * ${borderRadius});\n      box-shadow: ${high};\n      color: ${palette['foreground-color']};\n      &[data-popper-reference-hidden='true'] {\n        visibility: hidden;\n        pointer-events: none;\n      }\n\n      &[data-popper-placement^='top'] {\n        > ${StyledPopoverArrow} {\n          top: calc(100%);\n\n          ::before {\n            border-bottom-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          bottom: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='bottom'] {\n        > ${StyledPopoverArrow} {\n          bottom: calc(100%);\n\n          ::before {\n            border-top-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          top: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='right'] {\n        > ${StyledPopoverArrow} {\n          right: calc(100%);\n\n          ::before {\n            border-bottom-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          left: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n\n      &[data-popper-placement^='left'] {\n        > ${StyledPopoverArrow} {\n          left: calc(100%);\n\n          ::before {\n            border-top-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          right: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n    `;\n});\nStyledPopover.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Popover.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Popover from '../Popover';\nimport { useConsolidatedRef, useTestIds, useTheme, useUID } from '../../hooks';\nimport { calculateFontSize, readableHue } from '../../styles';\nimport { getActiveElement, mouseState, testElForOverflow, withTestIds } from '../../utils';\nimport { ThemeOverride } from '../Configuration';\nimport { getTooltipTestIds } from './Tooltip.test-ids';\nexport const StyledTooltip = styled.div(({ theme }) => {\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    background-color: ${theme.components.tooltip['background-color']};\n    color: ${theme.components.tooltip['foreground-color']};\n    font-size: ${fontSize.xxs};\n    max-width: 40ch;\n    padding: ${theme.base.spacing};\n    white-space: pre-line;\n    word-break: break-word;\n    pointer-events: none;\n  `;\n});\nStyledTooltip.defaultProps = defaultThemeProp;\nconst Tooltip = forwardRef(function Tooltip({ testId, children, target, showDelay = 'short', hideDelay = 'long', placement = 'bottom', describeTarget = true, smart, groupId = 'tooltip', ...restProps }, ref) {\n    const id = useUID();\n    const [show, setShow] = useState(false);\n    const tooltipRef = useConsolidatedRef(ref);\n    const lastClickedRef = useRef(null);\n    const testIds = useTestIds(testId, getTooltipTestIds);\n    const stringContentOnly = typeof children === 'string' ||\n        (Array.isArray(children) && children.every(child => typeof child === 'string'));\n    const onMouseDown = useCallback(({ target: eTarget }) => {\n        lastClickedRef.current = eTarget;\n        if (eTarget === tooltipRef.current || eTarget === target)\n            return;\n        setShow(false);\n    }, [target]);\n    useEffect(() => {\n        if (!target)\n            return;\n        const showTooltip = () => {\n            // This approach may result in a tooltip NOT appearing 1px before it should due to browser specifics. Enhance as needed.\n            // https://stackoverflow.com/a/64747288\n            const checkTruncation = (element) => {\n                if (testElForOverflow(element).some(Boolean) &&\n                    !['absolute', 'fixed'].includes(window.getComputedStyle(element).position))\n                    return true;\n                for (const child of element.children) {\n                    if (checkTruncation(child))\n                        return true;\n                }\n                return false;\n            };\n            setShow(smart ? checkTruncation(target) : true);\n        };\n        const onFocusIn = () => {\n            showTooltip();\n        };\n        const onFocusOut = () => {\n            if (!lastClickedRef.current || lastClickedRef.current !== tooltipRef.current) {\n                setShow(false);\n            }\n            lastClickedRef.current = null;\n        };\n        const onMouseEnter = () => {\n            if (mouseState.primary) {\n                return;\n            }\n            showTooltip();\n        };\n        const onMouseLeave = () => {\n            if (getActiveElement() !== target) {\n                setShow(false);\n            }\n        };\n        const onKeyDown = ({ key }) => {\n            if (key === 'Escape' && getActiveElement() === target) {\n                setShow(false);\n            }\n        };\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('mousedown', onMouseDown);\n        target.addEventListener('focusin', onFocusIn);\n        target.addEventListener('focusout', onFocusOut);\n        target.addEventListener('mouseenter', onMouseEnter);\n        target.addEventListener('mouseleave', onMouseLeave);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('mousedown', onMouseDown);\n            target.removeEventListener('focusin', onFocusIn);\n            target.removeEventListener('focusout', onFocusOut);\n            target.removeEventListener('mouseenter', onMouseEnter);\n            target.removeEventListener('mouseleave', onMouseLeave);\n        };\n    }, [target, onMouseDown, smart]);\n    useEffect(() => {\n        if (target && describeTarget && show) {\n            const describedBy = target.getAttribute('aria-describedby');\n            // Set the attribute to the old attribute plus the id\n            target.setAttribute('aria-describedby', describedBy ? `${describedBy} ${id}` : id);\n        }\n        else if (target) {\n            // Get the old attribute\n            const describedBy = target.getAttribute('aria-describedby');\n            if (describedBy) {\n                // If the old attribute matches the id just remove it entirely\n                if (describedBy === id) {\n                    target.removeAttribute('aria-describedby');\n                }\n                else {\n                    // Otherwise we want to just remove the id that was added and reset the attribute to what it was before\n                    const oldDescribedBy = describedBy.replace(new RegExp(`(?:^|\\\\s+)${id}`), '');\n                    target.setAttribute('aria-describedby', oldDescribedBy);\n                }\n            }\n        }\n    }, [describeTarget, target, show]);\n    const theme = useTheme();\n    const tooltipTheme = {\n        base: {\n            palette: {\n                'primary-background': theme.components.tooltip['background-color'],\n                'foreground-color': theme.components.tooltip['foreground-color'],\n                interactive: readableHue(theme.base.palette.interactive, theme.components.tooltip['background-color'])\n            }\n        }\n    };\n    return (_jsx(ThemeOverride, { theme: tooltipTheme, children: _jsx(Popover, { \"data-testid\": testIds.root, id: id, groupId: groupId, ...restProps, show: show, showDelay: showDelay, hideDelay: hideDelay, strategy: 'fixed', as: StyledTooltip, role: stringContentOnly ? 'tooltip' : 'dialog', target: target, arrow: true, placement: placement, onMouseDown: onMouseDown, hideOnTargetHidden: true, ref: tooltipRef, children: children }) }));\n});\nexport default withTestIds(Tooltip, getTooltipTestIds);\n//# sourceMappingURL=Tooltip.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState, useCallback, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { reflow, withTestIds } from '../../utils';\nimport Configuration from '../Configuration';\nimport Flex from '../Flex';\nimport { useConsolidatedRef, useElement, useTestIds } from '../../hooks';\nimport { getBackdropTestIds } from './Backdrop.test-ids';\nconst transitionSpeedToTheme = {\n    slow: 2,\n    medium: 1,\n    fast: 0.5,\n    none: 0\n};\nexport const StyledBackdrop = styled(Flex)(props => {\n    const { theme: { base } } = props;\n    const { opacity, alpha, variant, position } = props;\n    const transitionDuration = `max(calc(${transitionSpeedToTheme[props.transitionSpeed]} * ${base.animation.speed}), 1ms)`;\n    return css `\n      position: ${position};\n      z-index: ${position === 'fixed' ? base['z-index'].backdrop : base['z-index'].popover + 1};\n      top: 0;\n      left: 0;\n      height: 100%;\n      width: 100%;\n      border-radius: inherit;\n      opacity: ${opacity};\n      transition-property: opacity;\n      transition-timing-function: ${props.theme.base.animation.timing.ease};\n      /* stylelint-disable declaration-block-no-duplicate-properties */\n      transition-duration: 1ms;\n      transition-duration: ${transitionDuration};\n      /* stylelint-enable declaration-block-no-duplicate-properties */\n\n      ${variant === 'dark' &&\n        css `\n        background: rgba(0, 0, 0, ${alpha});\n      `}\n\n      ${variant === 'light' &&\n        css `\n        background: rgba(255, 255, 255, ${alpha});\n      `}\n    `;\n});\nStyledBackdrop.defaultProps = defaultThemeProp;\nexport default withTestIds(forwardRef(function Backdrop({ testId, children, container, open = false, variant = 'dark', transitionSpeed = 'medium', alpha = 0.6, position = 'fixed', onBeforeTransitionIn, onAfterTransitionIn, onBeforeTransitionOut, onAfterTransitionOut, ...restProps }, ref) {\n    const testIds = useTestIds(testId, getBackdropTestIds);\n    const [state, setState] = useState('closed');\n    const [backdropEl, setBackdropEl] = useElement();\n    const backdropRef = useConsolidatedRef(ref, setBackdropEl);\n    const onTransitionEnd = useCallback((e) => {\n        if (e.propertyName !== 'opacity' || e.target !== e.currentTarget)\n            return;\n        let nextState;\n        if (state === 'closing') {\n            nextState = 'closed';\n            onAfterTransitionOut?.();\n        }\n        else {\n            nextState = 'open';\n            onAfterTransitionIn?.();\n        }\n        setState(nextState);\n    }, [state, onAfterTransitionOut, onAfterTransitionIn]);\n    useEffect(() => {\n        if (open) {\n            if (state === 'closed' || state === 'closing') {\n                onBeforeTransitionIn?.();\n                reflow();\n                setState('opening');\n            }\n        }\n        else if (state === 'open' || state === 'opening') {\n            onBeforeTransitionOut?.();\n            setState('closing');\n        }\n    }, [open]);\n    // Using a separate effect instead of combined logic above as it seems more intuitive to mentally manage.\n    useEffect(() => {\n        if (!backdropRef.current)\n            return;\n        const opacity = window.getComputedStyle(backdropRef.current).opacity;\n        // If the opacity is already at the destination value, sync the state value.\n        if (state === 'closing' && opacity === '0') {\n            // Since the transition never ran, we have to pretend it did and call the callback.\n            // TODO: This maybe can be fixed with the animation api\n            onAfterTransitionOut?.();\n            setState('closed');\n        }\n        if (state === 'opening' && opacity === '1') {\n            // ditto, see above...\n            onAfterTransitionIn?.();\n            setState('open');\n        }\n    }, [state]);\n    return !open && state === 'closed' ? null : (_jsx(Configuration, { portalTarget: backdropEl ?? undefined, children: _jsx(StyledBackdrop, { \"data-testid\": testIds.root, container: { justify: 'center', alignItems: 'center', ...container }, transitionSpeed: transitionSpeed, opacity: state === 'opening' || state === 'open' ? 1 : 0, alpha: alpha, variant: variant, position: position, onTransitionEnd: onTransitionEnd, ref: backdropRef, ...restProps, children: children }) }));\n}), getBackdropTestIds);\n//# sourceMappingURL=Backdrop.js.map","import { rgba } from 'polished';\nimport styled, { css } from 'styled-components';\nimport { calculateFontSize, readableColor } from '../../styles';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport Backdrop from '../Backdrop';\nimport Flex from '../Flex';\nexport const StyledProgressBackdrop = styled(Backdrop) ``;\nconst StyledProgressVisual = styled.div(({ theme }) => {\n    return css `\n    &:focus-visible {\n      box-shadow: ${theme.components.button['focus-shadow']};\n      outline: none;\n      border-radius: calc(9999 * ${theme.base['border-radius']});\n    }\n  `;\n});\nStyledProgressVisual.defaultProps = defaultThemeProp;\nexport const StyledProgressRing = styled(StyledProgressVisual)(({ theme, placement, determinate }) => {\n    const size = placement === 'inline' ? '1em' : '2rem';\n    return css `\n    position: relative;\n\n    svg {\n      display: block;\n      width: ${size};\n      height: ${size};\n\n      circle {\n        fill: transparent;\n        stroke: ${theme.base.colors.gray['extra-light']};\n        stroke-width: 2;\n        r: 45%;\n        cx: 50%;\n        cy: 50%;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n\n        &:nth-child(2) {\n          stroke: ${theme.components.progress['progress-color']};\n          transition: stroke-dashoffset calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n\n          ${!determinate &&\n        css `\n            @keyframes LoadingRing {\n              0% {\n                transform: rotate(0deg);\n              }\n\n              100% {\n                transform: rotate(360deg);\n              }\n            }\n            animation: LoadingRing calc(4 * ${theme.base.animation.speed}) linear infinite;\n          `}\n        }\n      }\n    }\n\n    ${placement === 'inline' &&\n        css `\n      display: inline-flex;\n      vertical-align: top;\n    `}\n  `;\n});\nStyledProgressRing.defaultProps = defaultThemeProp;\nexport const StyledProgressBar = styled(StyledProgressVisual)(({ theme, placement, determinate }) => {\n    return css `\n    background-color: ${theme.base.colors.gray['extra-light']};\n    border-radius: ${theme.base['border-radius']};\n    ${placement === 'local'\n        ? css `\n          width: calc(100% - 4 * ${theme.base.spacing});\n        `\n        : css `\n          width: 100%;\n        `}\n    height: 0.375rem;\n    min-width: 2rem;\n    max-width: min(calc(100vw - 4 * ${theme.base.spacing}), ${theme.base['content-width'].lg});\n    overflow: hidden;\n\n    ::before {\n      content: '';\n      display: block;\n      height: 100%;\n      width: 100%;\n      left: 0;\n      border-radius: ${theme.base['border-radius']};\n      background-color: ${theme.components.progress['progress-color']};\n      ${determinate &&\n        css `\n        transform: translateX(var(--progress, 0));\n        transform-origin: 0 50%;\n        transition: transform calc(0.5 * ${theme.base.animation.speed})\n          ${theme.base.animation.timing.ease};\n      `}\n\n      ${!determinate &&\n        css `\n        @keyframes LoadingBar {\n          0% {\n            transform: translateX(-100%);\n          }\n\n          100% {\n            transform: translateX(200%);\n          }\n        }\n        animation: LoadingBar calc(8 * ${theme.base.animation.speed}) linear infinite;\n        width: 50%;\n      `}\n    }\n\n    ${placement === 'inline' &&\n        css `\n      width: 3rem;\n      display: inline-block;\n      position: relative;\n    `}\n  `;\n});\nStyledProgressBar.defaultProps = defaultThemeProp;\nexport const StyledProgressEllipsis = styled(StyledProgressVisual)(({ theme, placement }) => {\n    return css `\n    line-height: 1;\n    display: ${placement === 'inline' ? 'inline-flex' : 'block'};\n\n    @keyframes LoadingEllipsis {\n      0% {\n        transform: scale(0);\n        opacity: 0;\n      }\n\n      50% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(0);\n        opacity: 0;\n      }\n    }\n\n    > span {\n      display: flex;\n      justify-content: center;\n      mix-blend-mode: multiply;\n\n      ${placement === 'inline' &&\n        css `\n        display: inline-flex;\n      `}\n    }\n\n    > span span {\n      margin: 0 0.3125rem;\n      background: ${theme.components.progress['progress-color']};\n      border-radius: 50%;\n      animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;\n\n      ${placement === 'global' &&\n        css `\n        width: 1.25rem;\n        height: 1.25rem;\n      `}\n\n      ${(placement === 'local' || placement === 'block') &&\n        css `\n        width: 0.625rem;\n        height: 0.625rem;\n      `}\n\n      ${placement === 'inline' &&\n        css `\n        width: 0.1875rem;\n        height: 0.1875rem;\n        margin: 0 0.1875rem;\n        animation-duration: calc(4 * ${theme.base.animation.speed});\n      `}\n\n      &:nth-child(2) {\n        animation-delay: 0.1667s;\n      }\n\n      &:nth-child(3) {\n        animation-delay: ${0.1667 * 2}s;\n      }\n    }\n  `;\n});\nStyledProgressEllipsis.defaultProps = defaultThemeProp;\nexport const StyledMessage = styled.span(({ theme }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    font-size: ${fontSize[theme.components.label['font-size']]};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    color: ${color};\n  `;\n});\nStyledMessage.defaultProps = defaultThemeProp;\nexport const StyledProgress = styled(Flex)(({ theme, placement }) => {\n    return css `\n    ${placement !== 'inline' &&\n        css `\n      width: 100%;\n    `}\n\n    ${placement === 'block' &&\n        css `\n      margin-block: calc(2 * ${theme.base.spacing});\n    `}\n  `;\n});\nStyledProgress.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Progress.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledText = styled.span(props => {\n    const { variant, status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { 'foreground-color': foregroundColor, urgent: error, warn: warning, success }, transparency: { 'transparent-3': secondaryAlpha } }, components: { text } } } = props;\n    let color;\n    if (status) {\n        color = {\n            error,\n            warning,\n            success\n        }[status];\n    }\n    if (variant === 'secondary') {\n        color = tryCatch(() => rgba(color ?? foregroundColor, secondaryAlpha));\n    }\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n    font-size: ${fontSizes[text[variant]['font-size']]};\n    font-weight: ${text[variant]['font-weight']};\n    color: ${color};\n  `;\n});\nStyledText.defaultProps = defaultThemeProp;\nconst Text = forwardRef(function Text({ variant = 'primary', as, ...restProps }, ref) {\n    // If variant is for a heading, and no as is passed, set as to heading tag.\n    if (!as && /h\\d/i.test(variant))\n        as = variant;\n    return _jsx(StyledText, { ref: ref, variant: variant, as: as, ...restProps });\n});\nexport default Text;\n//# sourceMappingURL=Text.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useTheme } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { readableColor } from '../../styles';\nconst iconRegistry = new Map([]);\nexport const registerIcon = (...icons) => {\n    icons.forEach(({ set: modSet, name, ...iconDef }) => {\n        const set = modSet ?? 'budicon';\n        if (!iconRegistry.has(set)) {\n            iconRegistry.set(set, new Map([[name, iconDef]]));\n        }\n        else if (!iconRegistry.get(set).has(name)) {\n            iconRegistry.get(set).set(name, iconDef);\n        }\n    });\n};\nexport const forceRegisterIcon = (...icons) => {\n    icons.forEach(({ set: modSet, name, ...iconDef }) => {\n        const set = modSet ?? 'budicon';\n        if (!iconRegistry.has(set)) {\n            iconRegistry.set(set, new Map([[name, iconDef]]));\n        }\n        else {\n            iconRegistry.get(set).set(name, iconDef);\n        }\n    });\n};\nexport const StyledIcon = styled.svg(({ theme, size = 's' }) => {\n    const { components: { icon: { size: { s, m, l } } } } = theme;\n    return css `\n    display: inline-block;\n    fill: currentColor;\n    vertical-align: middle;\n    flex-shrink: 0;\n    /* stylelint-disable unit-allowed-list */\n    min-width: 14px;\n    min-height: 14px;\n    /* stylelint-enable unit-allowed-list */\n\n    ${size === 's' &&\n        css `\n      width: ${s};\n      height: ${s};\n    `}\n\n    ${size === 'm' &&\n        css `\n      width: ${m};\n      height: ${m};\n    `}\n\n    ${size === 'l' &&\n        css `\n      width: ${l};\n      height: ${l};\n    `}\n\n    ${size === 'font-size' &&\n        css `\n      width: 1em;\n      height: 1em;\n    `}\n  `;\n});\nStyledIcon.defaultProps = defaultThemeProp;\nexport const StyledIconShape = styled.div(({ theme, background, foreground, size = 'm', shape = 'square' }) => {\n    const readableFg = readableColor(background);\n    const { base: { 'border-radius': baseRadius }, components: { icon: { size: { s, m, l }, 'border-radius-multiplier': borderRadiusMultiplier } } } = theme;\n    return css `\n    color: ${foreground ?? readableFg};\n    background-color: ${background};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    ${size === 's' &&\n        css `\n      width: ${s};\n      height: ${s};\n    `}\n\n    ${size === 'm' &&\n        css `\n      width: ${m};\n      height: ${m};\n    `}\n\n    ${size === 'l' &&\n        css `\n      width: ${l};\n      height: ${l};\n    `}\n\n    ${size === 'font-size' &&\n        css `\n      width: 1em;\n      height: 1em;\n    `}\n\n    ${shape === 'square' &&\n        css `\n      border-radius: calc(${borderRadiusMultiplier} * ${baseRadius});\n    `}\n\n    ${shape === 'circle' &&\n        css `\n      border-radius: 50%;\n    `}\n\n    ${StyledIcon} {\n      width: 50%;\n      height: 50%;\n      /* stylelint-disable unit-allowed-list */\n      min-width: min(14px, 90%);\n      min-height: min(14px, 90%);\n      /* stylelint-enable unit-allowed-list */\n    }\n  `;\n});\nStyledIconShape.defaultProps = defaultThemeProp;\nconst emptyIconDefinition = Object.freeze({ Component: () => null });\nconst Icon = forwardRef(function Icon({ set: setProp, name, size, 'aria-label': ariaLabel, ...restProps }, ref) {\n    const { base: { 'icon-set': setTheme } } = useTheme();\n    const set = setProp ?? setTheme ?? 'budicon';\n    const [iconDef, setIconDef] = useState(iconRegistry.get(set)?.get(name) ?? emptyIconDefinition);\n    useEffect(() => {\n        if (iconRegistry.get(set)?.has(name)) {\n            setIconDef(iconRegistry.get(set).get(name));\n            return;\n        }\n        const controller = new AbortController();\n        (async () => {\n            try {\n                const encodedName = encodeURIComponent(name);\n                let iconSet;\n                let module;\n                switch (set) {\n                    case 'streamline':\n                        iconSet = 'streamline-icons';\n                        break;\n                    case 'budicon':\n                        iconSet = 'icons';\n                        break;\n                    default:\n                        throw new Error('Unknown icon');\n                }\n                // The following expression is required for Storybook Vite Builder\n                try {\n                    module = await import(`./${iconSet}/${encodedName}.icon`);\n                }\n                catch {\n                    module = await import(`./${iconSet}/${encodedName}.icon.tsx`);\n                }\n                if (module.name !== name || !module.Component)\n                    throw new Error('Malformed icon definition');\n                registerIcon(module);\n            }\n            catch {\n                registerIcon({ set, name, ...emptyIconDefinition });\n            }\n            if (!controller.signal.aborted) {\n                setIconDef(iconRegistry.get(set).get(name) ?? emptyIconDefinition);\n            }\n        })();\n        return () => controller.abort();\n    }, [name, set]);\n    return typeof restProps.background === 'string' ? (_jsx(StyledIconShape, { ...restProps, background: restProps.background, foreground: restProps.foreground, shape: restProps.shape, size: size, ref: ref, children: _jsx(StyledIcon, { role: ariaLabel !== undefined ? 'img' : 'presentation', \"aria-label\": ariaLabel, viewBox: iconDef.viewBox, children: _jsx(iconDef.Component, {}) }) })) : (_jsx(StyledIcon, { ...restProps, role: ariaLabel !== undefined ? 'img' : 'presentation', \"aria-label\": ariaLabel, viewBox: iconDef.viewBox, size: size, ref: ref, children: _jsx(iconDef.Component, {}) }));\n});\nexport default Icon;\n//# sourceMappingURL=Icon.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useEffect, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { meetsContrastGuidelines, mix } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { isPositionWithinRect, tryCatch } from '../../utils';\nimport { getActiveColors, getHoverColors, omitProps, readableColor, readableHue } from '../../styles';\nimport { useElement, useConsolidatedRef } from '../../hooks';\nimport Tooltip from '../Tooltip';\nimport Progress, { StyledProgressRing } from '../Progress';\nimport { StyledBackdrop } from '../Backdrop';\nimport { StyledIcon } from '../Icon';\nimport { StyledPopover } from '../Popover';\nconst baseStyles = (theme) => {\n    const { base: { spacing, animation: { speed, timing: { ease } }, 'disabled-opacity': disabledOpacity }, components: { button: { 'focus-shadow': focusShadow } } } = theme;\n    return css `\n    outline: none;\n    text-decoration: none;\n    transition-property: background-color, color, border-color, box-shadow, translate;\n    transition-duration: calc(0.5 * ${speed});\n    transition-timing-function: ${ease};\n    cursor: pointer;\n\n    & + & {\n      margin-inline-start: ${spacing};\n    }\n\n    /* Not able to combine with selector above. Stylis bug? */\n    & + ${StyledPopover} + & {\n      margin-inline-start: ${spacing};\n    }\n\n    &:disabled,\n    &[disabled] {\n      opacity: ${disabledOpacity};\n      cursor: not-allowed;\n      pointer-events: none;\n    }\n\n    &:enabled:focus,\n    &:not([disabled]):focus {\n      box-shadow: ${focusShadow};\n    }\n  `;\n};\nconst getFilledButtonStyles = (color) => ({\n    contrastColor: tryCatch(() => readableColor(color)),\n    hoverColors: getHoverColors(color),\n    activeColors: getActiveColors(color)\n});\nconst getOutlinedButtonStyles = (color, backgroundColor) => {\n    const backgroundUsable = meetsContrastGuidelines(color, backgroundColor).AA;\n    const usableColor = backgroundUsable ? color : readableHue(color, backgroundColor);\n    const hoverBackgroundColor = tryCatch(() => mix(0.9, backgroundColor, color));\n    const activeBackgroundColor = tryCatch(() => mix(0.8, backgroundColor, usableColor));\n    return {\n        textColor: backgroundUsable ? color : readableColor(color),\n        hoverBg: hoverBackgroundColor,\n        hoverFg: readableHue(color, hoverBackgroundColor ?? 'transparent'),\n        activeBg: tryCatch(() => mix(0.8, backgroundColor, usableColor)),\n        activeFg: readableHue(usableColor, activeBackgroundColor ?? 'transparent')\n    };\n};\nexport const StyledButton = styled.button.withConfig(omitProps('loading'))(({ variant, icon, loading, compact, theme }) => {\n    const { base: { spacing, 'border-radius': baseBorderRadius, palette: { 'primary-background': backgroundColor }, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger, 'compact-min': hitAreaCompact }, animation: { speed, timing: { ease } } }, components: { button: { color, 'secondary-color': secondaryColor, 'secondary-fill-style': fillStyle, padding, 'border-radius': borderRadius, 'border-width': borderWidth, touch: { padding: touchPadding } } } } = theme;\n    // Base\n    const base = baseStyles(theme);\n    // Non-text base\n    const nonTextual = css `\n      position: relative;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      min-height: ${hitAreaMouse};\n      min-width: ${hitAreaMouse};\n      border: ${borderWidth} solid transparent;\n      border-radius: calc(${baseBorderRadius} * ${borderRadius});\n      -webkit-user-select: none;\n      user-select: none;\n\n      ${!icon &&\n        css `\n        padding: ${padding};\n      `}\n\n      ${icon &&\n        css `\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n\n        > svg {\n          display: block;\n        }\n      `}\n\n      ${compact &&\n        css `\n        min-height: ${hitAreaCompact};\n        min-width: ${hitAreaCompact};\n      `}\n\n      @media (pointer: coarse) {\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n\n        ${!compact &&\n        css `\n          min-height: ${hitAreaFinger};\n          min-width: ${hitAreaFinger};\n        `}\n\n        ${!icon &&\n        css `\n          padding: ${touchPadding};\n        `}\n      }\n\n      &:active {\n        translate: 0 0.0625rem;\n      }\n\n      &::after {\n        content: '';\n        position: absolute;\n        inset: calc(-1 * ${borderWidth});\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        transition: translate calc(0.5 * ${speed}) ${ease};\n      }\n\n      &:active::after {\n        translate: 0 -0.0625rem;\n      }\n    `;\n    // Primary and Secondary-filled\n    const { contrastColor, hoverColors, activeColors } = getFilledButtonStyles(variant === 'primary' ? color : secondaryColor);\n    const solidButtonStyles = css `\n      --button-background-color: ${variant === 'primary' ? color : secondaryColor};\n      color: ${contrastColor};\n      background-color: ${variant === 'primary' ? color : secondaryColor};\n\n      @media (hover: hover) {\n        &:hover {\n          background-color: ${hoverColors.background};\n          text-decoration: none;\n        }\n      }\n\n      &:active {\n        background-color: ${activeColors.background};\n        color: ${activeColors.foreground};\n        text-decoration: none;\n      }\n    `;\n    // Secondary-outline\n    const secondaryOutlineButtonStyles = getOutlinedButtonStyles(secondaryColor, backgroundColor);\n    const secondary = css `\n      --button-background-color: ${backgroundColor};\n      color: ${secondaryOutlineButtonStyles.textColor};\n      background-color: ${backgroundColor};\n      border-color: ${secondaryColor};\n\n      @media (hover: hover) {\n        &:hover {\n          background-color: ${secondaryOutlineButtonStyles.hoverBg};\n          text-decoration: none;\n        }\n      }\n\n      &:active {\n        color: ${secondaryOutlineButtonStyles.activeFg};\n        background-color: ${secondaryOutlineButtonStyles.activeBg};\n        border-color: ${secondaryOutlineButtonStyles.activeFg};\n        text-decoration: none;\n      }\n    `;\n    // Simple\n    const simpleButtonStyles = getOutlinedButtonStyles(fillStyle === 'outline' ? secondaryColor : color, backgroundColor);\n    const simple = css `\n      --button-background-color: ${icon ? 'transparent' : backgroundColor};\n      color: ${icon ? 'currentColor' : simpleButtonStyles.textColor};\n      background-color: ${icon ? 'transparent' : backgroundColor};\n\n      @media (hover: hover) {\n        &:hover {\n          ${icon &&\n        css `\n            ::before {\n              content: '';\n              position: absolute;\n              top: calc(${borderWidth} * -1);\n              bottom: calc(${borderWidth} * -1);\n              left: calc(${borderWidth} * -1);\n              right: calc(${borderWidth} * -1);\n              border-radius: inherit;\n              background-color: currentColor;\n              opacity: 0.1;\n            }\n          `}\n\n          ${!icon &&\n        css `\n            background-color: ${simpleButtonStyles.hoverBg};\n            color: ${simpleButtonStyles.hoverFg};\n            border-color: ${simpleButtonStyles.hoverFg};\n            text-decoration: none;\n          `}\n        }\n\n        &:active {\n          ${icon &&\n        css `\n            ::before {\n              content: '';\n              position: absolute;\n              top: calc(${borderWidth} * -1);\n              bottom: calc(${borderWidth} * -1);\n              left: calc(${borderWidth} * -1);\n              right: calc(${borderWidth} * -1);\n              border-radius: inherit;\n              background-color: currentColor;\n              opacity: 0.2;\n            }\n          `}\n\n          ${!icon &&\n        css `\n            background-color: ${simpleButtonStyles.activeBg};\n            color: ${simpleButtonStyles.activeFg};\n            border-color: ${simpleButtonStyles.activeFg};\n            text-decoration: none;\n          `}\n        }\n      }\n    `;\n    return css `\n      ${base}\n      ${nonTextual}\n      ${(variant === 'primary' || (variant === 'secondary' && fillStyle === 'fill')) &&\n        solidButtonStyles}\n      ${variant === 'secondary' && fillStyle === 'outline' && secondary}\n      ${variant === 'simple' && simple}\n\n      ${loading &&\n        css `\n        ${StyledBackdrop} {\n          background-color: var(--button-background-color);\n          border-radius: inherit;\n        }\n\n        ${StyledProgressRing} {\n          width: 1em;\n          height: 1em;\n\n          ${!icon &&\n            css `\n            margin-inline-end: calc(${spacing} / 2);\n          `}\n\n          circle:nth-child(2) {\n            animation-duration: calc(${speed} * 2);\n          }\n        }\n      `}\n    `;\n});\nStyledButton.defaultProps = defaultThemeProp;\nexport const StyledButtonLink = styled.a.withConfig(omitProps('loading'))(({ theme, variant }) => {\n    const { base: { palette: { 'foreground-color': textColor } }, components: { link: { color: linkColor } } } = theme;\n    const base = baseStyles(theme);\n    const textual = css `\n    background-color: transparent;\n    display: inline;\n    text-align: start;\n    border: none;\n\n    @media (hover: hover) {\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n\n    > ${StyledIcon} {\n      vertical-align: bottom;\n    }\n  `;\n    const { background: activeColor } = getActiveColors(linkColor);\n    const link = css `\n    color: ${linkColor};\n\n    &:active {\n      color: ${activeColor};\n    }\n  `;\n    const text = css `\n    color: ${textColor};\n  `;\n    return css `\n    ${base}\n    ${textual}\n      ${variant === 'link' && link}\n      ${variant === 'text' && text}\n  `;\n});\nStyledButtonLink.defaultProps = defaultThemeProp;\nconst Button = forwardRef(function Button({ variant = 'secondary', type = 'button', disabled = false, icon = false, compact = false, href, as, forwardedAs, label, 'aria-label': ariaLabel, loading = false, children, ...restProps }, ref) {\n    const [buttonEl, setButtonEl] = useElement();\n    const mouseDownEvent = useRef();\n    const mouseDownPosition = useRef();\n    const mouseDownTimestamp = useRef();\n    const buttonRef = useConsolidatedRef(ref, setButtonEl);\n    const isTextual = ['link', 'text'].includes(variant);\n    const showProgress = loading && !isTextual;\n    const StyledComp = isTextual ? StyledButtonLink : StyledButton;\n    const handleClickWithElementShift = (e) => {\n        if (buttonRef.current &&\n            mouseDownPosition.current &&\n            mouseDownTimestamp.current &&\n            isPositionWithinRect({ x: e.clientX, y: e.clientY }, mouseDownPosition.current) &&\n            Date.now() - mouseDownTimestamp.current < 500) {\n            buttonRef.current.click();\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('mouseup', handleClickWithElementShift);\n        return () => {\n            document.removeEventListener('mouseup', handleClickWithElementShift);\n            mouseDownEvent.current = undefined;\n            mouseDownPosition.current = undefined;\n            mouseDownTimestamp.current = undefined;\n        };\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsxs(StyledComp, { ...restProps, ref: buttonRef, as: as || (href ? 'a' : 'button'), forwardedAs: forwardedAs || (href ? 'a' : 'button'), variant: variant, icon: icon, compact: compact, type: href ? undefined : type, href: href, disabled: disabled && !href, loading: showProgress, \"aria-label\": ariaLabel || label, onMouseDown: (e) => {\n                    restProps.onMouseDown?.(e);\n                    e.persist();\n                    mouseDownEvent.current = e;\n                    mouseDownPosition.current = e.currentTarget.getBoundingClientRect();\n                    mouseDownTimestamp.current = Date.now();\n                }, onMouseUp: (e) => {\n                    const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n                    mouseDownEvent.current = undefined;\n                    mouseDownPosition.current = undefined;\n                    mouseDownTimestamp.current = undefined;\n                    if (shouldFocus && buttonRef.current !== document.activeElement) {\n                        buttonRef.current?.focus();\n                    }\n                    return restProps.onMouseUp?.(e);\n                }, children: [showProgress && _jsx(Progress, { variant: 'ring', placement: 'inline' }), !icon || !showProgress ? children : null] }), buttonEl && label && (_jsx(Tooltip, { target: buttonEl, showDelay: 'none', hideDelay: 'none', describeTarget: false, children: label }))] }));\n});\nexport default Button;\n//# sourceMappingURL=Button.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef } from '../../hooks';\nexport const StyledBareButton = styled.button `\n  background: none;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  color: inherit;\n\n  & + & {\n    margin-inline-start: ${props => props.theme.base.spacing};\n  }\n`;\nStyledBareButton.defaultProps = defaultThemeProp;\nconst BareButton = forwardRef(function BareButton({ type = 'button', disabled = false, href, ...restProps }, ref) {\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref);\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsx(StyledBareButton, { ref: buttonRef, as: href ? 'a' : undefined, type: href ? undefined : type, disabled: disabled, ...restProps, href: href, onMouseDown: (e) => {\n            restProps.onMouseDown?.(e);\n            e.persist();\n            mouseDownEvent.current = e;\n        }, onMouseUp: (e) => {\n            const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n            mouseDownEvent.current = undefined;\n            if (shouldFocus && buttonRef.current !== document.activeElement) {\n                buttonRef.current?.focus();\n            }\n            return restProps.onMouseUp?.(e);\n        } }));\n});\nexport default BareButton;\n//# sourceMappingURL=BareButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { hideVisually } from 'polished';\nexport const StyledVisuallyHiddenText = styled.span `\n  ${hideVisually}\n  -webkit-user-select: none;\n  user-select: none;\n`;\nconst VisuallyHiddenText = forwardRef(function VisuallyHiddenText(props, ref) {\n    return _jsx(StyledVisuallyHiddenText, { ...props, ref: ref });\n});\nexport default VisuallyHiddenText;\n//# sourceMappingURL=VisuallyHiddenText.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport useOS from '../../hooks/useOS';\nimport { useTestIds } from '../../hooks';\nimport { withTestIds } from '../../utils';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nimport { getKeyboardTestIds } from './Badges.test-ids';\nconst osxKeyMapper = {\n    Command: '⌘',\n    Alt: '⌥',\n    Option: '⌥',\n    Control: '⌃',\n    Return: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"\\u21B5\" }), _jsx(VisuallyHiddenText, { children: \"Return\" })] })),\n    Enter: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"\\u21B5\" }), _jsx(VisuallyHiddenText, { children: \"Enter\" })] })),\n    Delete: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"Del\" }), _jsx(VisuallyHiddenText, { children: \"Delete\" })] })),\n    CommandOrControl: '⌘'\n};\nconst windowsKeyMapper = {\n    Control: 'Ctrl',\n    Alt: 'Alt',\n    Option: 'Alt',\n    Meta: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"\\u229E\" }), _jsx(VisuallyHiddenText, { children: \"Windows\" })] })),\n    Command: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"\\u229E\" }), _jsx(VisuallyHiddenText, { children: \"Windows\" })] })),\n    Backspace: 'Backspace',\n    CommandOrControl: 'Ctrl'\n};\nconst generalKeyMapper = {\n    'Page up': (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"Pg up\" }), _jsx(VisuallyHiddenText, { children: \"Page up\" })] })),\n    'Page down': (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"Pg dn\" }), _jsx(VisuallyHiddenText, { children: \"Page down\" })] })),\n    Ins: 'Insert',\n    Shift: (_jsxs(_Fragment, { children: [_jsx(\"span\", { \"aria-hidden\": true, children: \"\\u21E7\" }), _jsx(VisuallyHiddenText, { children: \"Shift\" })] }))\n};\nexport const StyledKeyboard = styled.kbd(({ theme: { base, components: { text: { primary }, badges: { keyboard } } } }) => {\n    return css `\n      background-color: ${keyboard['background-color']};\n      color: ${base.palette['foreground-color']};\n      display: inline-block;\n      position: relative;\n      font-family: ${base['font-family']};\n      font-weight: ${primary['font-weight']};\n      overflow: hidden;\n      white-space: nowrap;\n      padding: 0.125rem;\n      border: 0.0125rem solid ${keyboard['border-color']};\n      border-radius: calc(${base['border-radius']} / 4);\n      text-transform: capitalize;\n      text-align: center;\n      min-width: 1.25rem;\n      height: 1.25rem;\n      text-overflow: ellipsis;\n      line-height: 1rem;\n      inset-block-start: calc(1.25rem / 4 - 0.125rem);\n    `;\n});\nStyledKeyboard.defaultProps = defaultThemeProp;\nexport default withTestIds(forwardRef(function Keyboard({ testId, keyName, ...restProps }, ref) {\n    const { windows: isWindows } = useOS();\n    const testIds = useTestIds(testId, getKeyboardTestIds);\n    return (_jsx(StyledKeyboard, { \"data-testid\": testIds.root, ...restProps, ref: ref, children: (isWindows && windowsKeyMapper[keyName]) ||\n            osxKeyMapper[keyName] ||\n            generalKeyMapper[keyName] ||\n            keyName }));\n}), getKeyboardTestIds);\n//# sourceMappingURL=Keyboard.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, createContext, useContext, useMemo, useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { createPortal } from 'react-dom';\nimport { defaultThemeProp } from '../../theme';\nimport { useConfiguration, useConsolidatedRef, useElement, useFocusTrap, useScrollToggle, useTestIds } from '../../hooks';\nimport Configuration from '../Configuration';\nimport { withTestIds } from '../../utils';\nimport { getFullscreenTestIds } from './Fullscreen.test-ids';\nexport const StyledFullscreen = styled.div(({ theme, fullscreen }) => {\n    return css `\n      ${fullscreen &&\n        css `\n        --content-height-in-view: 100vh;\n        position: fixed;\n        z-index: ${theme.base['z-index'].backdrop};\n        inset: 0;\n      `}\n    `;\n});\nStyledFullscreen.defaultProps = defaultThemeProp;\nexport const FullscreenContext = createContext(undefined);\nexport const useFullscreenContext = () => {\n    // Ensure easier/safer destructuring in use\n    return useContext(FullscreenContext);\n};\nconst PortalRender = ({ parentJSX, parentElRef }) => {\n    const { portalTarget } = useConfiguration();\n    useFocusTrap(parentElRef);\n    const { disableScroll, enableScroll } = useScrollToggle();\n    useEffect(() => {\n        disableScroll();\n        return enableScroll;\n    }, []);\n    return portalTarget\n        ? createPortal(_jsx(Configuration, { portalTarget: parentElRef.current ?? undefined, children: parentJSX }), portalTarget)\n        : null;\n};\nexport default withTestIds(forwardRef(function Fullscreen({ children, testId, ...restProps }, ref) {\n    const testIds = useTestIds(testId, getFullscreenTestIds);\n    // setParentEl ensures one extra render needed for keeping div passed to PortalRender up to date\n    const [parentEl, setParentEl] = useElement(null);\n    const parentElRef = useConsolidatedRef(setParentEl, ref);\n    const [fullscreen, setFullscreen] = useState(undefined);\n    const ctxValue = useMemo(() => {\n        return [\n            fullscreen,\n            () => {\n                setFullscreen(cur => !cur);\n            }\n        ];\n    }, [fullscreen]);\n    const parentJSX = (_jsx(StyledFullscreen, { \"data-testid\": testIds.root, ...restProps, ref: parentElRef, fullscreen: !!fullscreen, children: children }));\n    return (_jsx(FullscreenContext.Provider, { value: ctxValue, children: fullscreen && parentEl ? (_jsx(PortalRender, { parentJSX: parentJSX, parentElRef: parentElRef })) : (parentJSX) }));\n}), getFullscreenTestIds);\n//# sourceMappingURL=Fullscreen.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useRef, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport BareButton from '../Button/BareButton';\nimport { defaultThemeProp } from '../../theme';\nimport { useBreakpoint, useConsolidatedRef, useI18n, useUID, useModalContext, useOS, useTestIds } from '../../hooks';\nimport { documentIsAvailable, tryCatch, withTestIds } from '../../utils';\nimport { calculateFontSize, readableColor } from '../../styles';\nimport AppShellContext from '../AppShell/AppShellContext';\nimport { Keyboard } from '../Badges';\nimport Text, { StyledText } from '../Text';\nimport { StyledKeyboard } from '../Badges/Keyboard';\nimport Flex from '../Flex';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as openIcon from '../Icon/icons/open.icon';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nimport { useFullscreenContext } from '../Fullscreen';\nimport { getLinkTestIds } from './Link.test-ids';\nexport const StyledLinkPopover = styled.div(({ theme, preview }) => css `\n    background-color: ${theme.components.tooltip['background-color']};\n    z-index: ${theme.base['z-index'].tooltip};\n\n    ${preview &&\n    css `\n      padding: ${theme.base.spacing};\n    `}\n  `);\nStyledLinkPopover.defaultProps = defaultThemeProp;\nexport const StyledLinkPopoverBtn = styled(BareButton)(({ theme }) => {\n    const contrastColor = tryCatch(() => readableColor(theme.components.tooltip['background-color']));\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    z-index: 1;\n    padding: 0 ${theme.base.spacing};\n    min-height: 1.5rem;\n    line-height: 1;\n    color: ${contrastColor};\n    font-size: ${fontSize.xs};\n    text-decoration: none;\n\n    /* FIXME: Button selector specificity... */\n    & + & {\n      margin: 0;\n    }\n\n    & + &::before {\n      content: '';\n      position: absolute;\n      inset-inline-start: 0;\n      inset-block: 0;\n      width: 1px; /* stylelint-disable-line unit-allowed-list */\n      background-color: ${contrastColor};\n      opacity: ${theme.base.transparency['transparent-3']};\n    }\n\n    &:hover,\n    &:active {\n      text-decoration: underline;\n    }\n\n    &:focus {\n      box-shadow:\n        inset 0 0 0 0.0625rem ${theme.base.palette.light},\n        0 0 0.125rem 0.0625rem ${theme.base.palette.interactive};\n    }\n  `;\n});\nStyledLinkPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLinkPreviewPopoverBtn = styled(StyledLinkPopoverBtn)(({ theme }) => {\n    return css `\n    width: 100%;\n    padding: unset;\n\n    &:hover,\n    &:active {\n      text-decoration: none;\n      ${StyledText} span {\n        text-decoration: underline;\n      }\n    }\n\n    ${StyledText} {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n\n    ${StyledKeyboard} {\n      color: ${theme.base.palette.light};\n      background-color: ${theme.base.colors.gray.dark};\n      border-color: ${theme.base.colors.gray.medium};\n      inset-block-start: unset;\n\n      &:first-of-type {\n        margin-inline: ${theme.base.spacing};\n      }\n    }\n  `;\n});\nStyledLinkPreviewPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLink = styled(Button) `\n  &:has(> img) {\n    display: inline-block;\n\n    ${StyledIcon} {\n      vertical-align: top;\n    }\n  }\n`;\nStyledLink.defaultProps = defaultThemeProp;\nregisterIcon(openIcon);\n// Blocks usage of \"javascript:\" scheme.\n// @see https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/shared/sanitizeURL.js#L19-L20\nconst disallowedURI = // eslint-disable-next-line no-control-regex\n /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*:/i;\nconst Link = forwardRef(function Link({ testId, href: hrefProp, variant = 'link', icon = false, previewable: showPreviewOpenInTabPopoverProp = false, onPreview, target: targetProp, children, ...restProps }, ref) {\n    const href = disallowedURI.test(hrefProp) ? undefined : hrefProp;\n    const { initialized: inModal } = useModalContext();\n    const fullscreen = useFullscreenContext();\n    const inFullscreen = !!(fullscreen && fullscreen[0]);\n    const { previewTriggerRef } = useContext(AppShellContext);\n    const uid = useUID();\n    const linkRef = useConsolidatedRef(ref);\n    const [popover, setPopover] = useState(false);\n    const [popoverHideDelay, setPopoverHideDelay] = useState('short');\n    const [previewPopover, setPreviewPopover] = useState(false);\n    const previewBtnRef = useRef(null);\n    const isSmallOrAbove = useBreakpoint('sm');\n    const t = useI18n();\n    const { macintosh } = useOS();\n    const contextMenuOpened = useRef(false);\n    const testIds = useTestIds(testId, getLinkTestIds);\n    const previewable = showPreviewOpenInTabPopoverProp && !inModal && !inFullscreen;\n    let crossOrigin;\n    try {\n        if (href) {\n            const url = new URL(href, document.location.href);\n            crossOrigin = documentIsAvailable\n                ? /^https?:$/.test(url.protocol) && document.location.origin !== url.origin\n                : false;\n        }\n        else {\n            crossOrigin = false;\n        }\n    }\n    catch {\n        crossOrigin = false;\n    }\n    const target = crossOrigin ? '_blank' : targetProp;\n    const showPopover = () => {\n        if (isSmallOrAbove && !previewPopover) {\n            setPopover(true);\n        }\n    };\n    const showPreviewPopover = () => {\n        if (isSmallOrAbove && !popover && !contextMenuOpened.current)\n            setPreviewPopover(true);\n    };\n    const hidePopover = () => {\n        setPopover(false);\n    };\n    const hidePreviewPopover = () => {\n        setPreviewPopover(false);\n    };\n    const onBlurLink = () => {\n        contextMenuOpened.current = false;\n        hidePreviewPopover();\n    };\n    const onPreviewClick = () => {\n        previewTriggerRef.current = linkRef.current;\n        if (href !== undefined) {\n            onPreview?.({ href });\n        }\n    };\n    const onKeyUp = (e) => {\n        if (e.getModifierState('Alt') && e.code === 'KeyP') {\n            onPreviewClick();\n        }\n    };\n    useEffect(() => {\n        if (popoverHideDelay === 'none' && !popover && !previewPopover) {\n            setPopoverHideDelay('short');\n        }\n    }, [popoverHideDelay, popover, previewPopover]);\n    return (_jsxs(_Fragment, { children: [_jsxs(StyledLink, { \"data-testid\": testIds.root, href: href, variant: variant, ref: linkRef, target: target, ...restProps, \"aria-describedby\": previewable ? `${uid}-preview-instructions` : undefined, onMouseEnter: showPreviewOpenInTabPopoverProp\n                    ? () => {\n                        showPopover();\n                    }\n                    : undefined, onMouseLeave: hidePopover, onFocus: showPreviewOpenInTabPopoverProp\n                    ? () => {\n                        showPreviewPopover();\n                    }\n                    : undefined, onBlur: onBlurLink, onKeyUp: onKeyUp, onContextMenu: () => {\n                    contextMenuOpened.current = true;\n                    setPopoverHideDelay('none');\n                    setPreviewPopover(false);\n                    setPopover(false);\n                }, children: [children, target === '_blank' && _jsx(VisuallyHiddenText, { children: t('opens_in_a_new_tab') }), !icon && target === '_blank' && _jsx(Icon, { name: 'open' })] }), previewable && (_jsx(Popover, { \"data-testid\": testIds.previewPopover, show: previewPopover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, as: StyledLinkPopover, arrow: true, preview: true, portal: true, onHide: hidePreviewPopover, onClick: (e) => {\n                    e.stopPropagation();\n                }, children: _jsx(StyledLinkPreviewPopoverBtn, { \"data-testid\": testIds.preview, preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: _jsxs(Text, { children: [_jsx(\"span\", { children: t('preview') }), _jsxs(Flex, { container: { inline: true, justify: 'end' }, children: [_jsx(Keyboard, { keyName: 'Alt' }), _jsx(Keyboard, { keyName: 'P' })] })] }) }) })), _jsxs(Popover, { \"data-testid\": testIds.previewPopover, show: popover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, onMouseEnter: showPopover, onMouseLeave: hidePopover, as: StyledLinkPopover, arrow: true, portal: true, onClick: (e) => {\n                    e.stopPropagation();\n                }, children: [previewable && (_jsx(StyledLinkPopoverBtn, { \"data-testid\": testIds.preview, preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: t('preview') })), _jsx(StyledLinkPopoverBtn, { \"data-testid\": testIds.newTab, forwardedAs: 'a', href: href, target: '_blank', rel: 'noreferrer', tabIndex: '-1', children: t('link_open_in_tab_text') })] }), previewable && (_jsx(\"span\", { id: `${uid}-preview-instructions`, hidden: true, children: t('preview_link_instruction', [macintosh ? 'option' : 'alt']) }))] }));\n});\nexport default withTestIds(Link, getLinkTestIds);\n//# sourceMappingURL=Link.js.map","import { createElement as _createElement } from \"react\";\nimport { jsxs as _jsxs, Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport { useContext, useReducer, useMemo, useLayoutEffect, useRef, useState, forwardRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport Icon, { registerIcon } from '../Icon';\nimport Link, { StyledLink } from '../Link';\nimport * as timesIcon from '../Icon/icons/times.icon';\nimport { createUID, windowIsAvailable, withTestIds, hasProp, getActiveElement, getFocusables } from '../../utils';\nimport { useConfiguration, useI18n, useLiveLog, useOS, useShortcut, useTestIds, useConsolidatedRef, useEscape, useFocusWithin } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport '../../init';\nimport { registerAction } from '../ShortcutManager';\nimport { Keyboard } from '../Badges';\nimport { StyledKeyboard } from '../Badges/Keyboard';\nimport { ToasterContext } from './Context';\nimport { getToasterTestIds } from './Toaster.test-ids';\nregisterIcon(timesIcon);\nregisterAction({ id: 'JumpToToast', defaultKeyBinding: 'Alt+Enter' }, { id: 'DismissToast', defaultKeyBinding: 'Alt+Q' });\nconst StyledToastButton = styled.button(({ theme }) => css `\n    border: none;\n    color: inherit;\n    padding: 0;\n    font-size: 1rem;\n    margin-block: calc(${theme.base.spacing} / 2);\n    margin-inline-end: calc(${theme.base.spacing} / 2);\n\n    &:enabled:hover {\n      background: #ffffff19;\n    }\n\n    &:enabled:focus {\n      box-shadow: ${theme.base.shadow.focus};\n    }\n  `);\nStyledToastButton.defaultProps = defaultThemeProp;\nconst StyledToastContent = styled.div(({ theme }) => {\n    return css `\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: clip;\n    text-overflow: ellipsis;\n    font-size: ${theme.base['font-size']};\n    margin-inline-start: calc(${theme.base['border-radius']} / 2);\n    padding-inline-start: calc(${theme.base.spacing} / 2);\n\n    ${StyledLink} {\n      color: ${theme.base.colors.blue.light};\n    }\n  `;\n});\nStyledToastContent.defaultProps = defaultThemeProp;\nconst StyledToast = styled.div(({ theme }) => {\n    return css `\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-start: 0;\n    width: 100%;\n    background: ${theme.base.colors.slate['extra-dark']};\n    color: ${theme.base.colors.white};\n    border-radius: calc(${theme.base['border-radius']} / 2);\n    opacity: var(--opacity);\n    transform: translateY(var(--translateY)) scale(var(--scale));\n    transition-property: transform, opacity;\n    transition-duration: ${theme.base.animation.speed};\n    transition-timing-function: ${theme.base.animation.timing.ease};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n\n    :focus {\n      box-shadow: ${theme.base.shadow.focus};\n    }\n\n    ${StyledKeyboard} {\n      color: ${theme.base.palette.light};\n      background-color: ${theme.base.colors.gray.dark};\n      border-color: ${theme.base.colors.gray.medium};\n      inset-block-start: unset;\n    }\n  `;\n});\nStyledToast.defaultProps = defaultThemeProp;\nconst StyledToaster = styled.div(({ theme }) => {\n    return css `\n    position: fixed;\n    z-index: ${theme.base['z-index'].toast};\n    width: min(40ch, calc(100% - 1rem));\n    inset-inline-start: 50%;\n    transform: translateX(-50%);\n    top: 100%;\n  `;\n});\nStyledToaster.defaultProps = defaultThemeProp;\nfunction reducer(current, action) {\n    switch (action.type) {\n        case 'push':\n            return [\n                ...current,\n                {\n                    ...action.payload\n                }\n            ];\n        case 'unmount':\n            return current.filter(m => m.id !== action.payload);\n        default:\n            return current;\n    }\n}\nconst Toast = forwardRef(function Toast({ id, firstToast, dispatch, topLevelDismiss, translateY, onDismiss, dismissAfter, ...restProps }, ref) {\n    const [dismissed, setDismissed] = useState(false);\n    const timeoutRef = useRef(NaN);\n    const t = useI18n();\n    const { macintosh } = useOS();\n    const { announcePolite } = useLiveLog();\n    const content = hasProp(restProps, 'href') ? t('created') : restProps.content;\n    const initiatorRef = useRef(null);\n    const containerRef = useConsolidatedRef(ref);\n    useEffect(() => {\n        const fullMessage = hasProp(restProps, 'href')\n            ? `${content} ${id} ${restProps.label}`\n            : content;\n        const shortcutJumpMessage = t('keypress_instruction', [\n            macintosh ? 'Option + Enter' : 'Alt + Enter',\n            t('shortcut_JumpToToast')\n        ]);\n        const shortcutDismissMessage = t('keypress_instruction', [\n            macintosh ? 'Option + Q' : 'Alt + Q',\n            t('shortcut_DismissToast')\n        ]);\n        announcePolite({\n            message: `${fullMessage}. ${shortcutJumpMessage}. ${shortcutDismissMessage}.`,\n            type: 'acknowledgement'\n        });\n    }, []);\n    const onTransitionEnd = (e) => {\n        if (dismissed && e.propertyName === 'opacity' && e.target === e.currentTarget) {\n            dispatch({ type: 'unmount', payload: id });\n        }\n    };\n    const dismiss = (timeout) => () => {\n        if (initiatorRef.current) {\n            initiatorRef.current?.focus?.();\n            initiatorRef.current = null;\n        }\n        clearTimeout(timeoutRef.current);\n        if (dismissed)\n            return;\n        setDismissed(true);\n        onDismiss?.({ id, timeout });\n        topLevelDismiss?.({ id, timeout });\n    };\n    const startTimer = () => {\n        if (Number.isFinite(dismissAfter)) {\n            timeoutRef.current = window.setTimeout(dismiss(true), dismissAfter);\n        }\n    };\n    useEffect(() => {\n        startTimer();\n        return () => {\n            window.clearTimeout(timeoutRef.current);\n        };\n    }, []);\n    // Alt+Enter focuses on the first focusable element in the first toast.\n    // Tab to the next toast if there are multiple.\n    useShortcut('JumpToToast', () => {\n        const activeElement = getActiveElement();\n        if (activeElement && activeElement !== document.body) {\n            initiatorRef.current = activeElement;\n        }\n        if (firstToast && containerRef.current) {\n            getFocusables(containerRef.current)[0]?.focus();\n        }\n    });\n    // Alt+Q dismisses the first toast.\n    useShortcut('DismissToast', () => {\n        if (firstToast)\n            dismiss(false)();\n    });\n    // Escape dismisses the toast and focuses the initiator.\n    useEscape(() => {\n        const currentFocus = getActiveElement();\n        if (containerRef.current?.contains(currentFocus)) {\n            dismiss(false)();\n        }\n    });\n    useFocusWithin([containerRef], (focused) => {\n        if (focused) {\n            window.clearTimeout(timeoutRef.current);\n        }\n        else {\n            startTimer();\n        }\n    });\n    return (_jsxs(Flex, { ...restProps, \"data-app-region\": true, container: { alignItems: 'center', gap: 0.25 }, as: StyledToast, ref: containerRef, style: {\n            '--translateY': `${-translateY}px`,\n            '--opacity': dismissed ? '0' : '1',\n            '--scale': dismissed ? '0' : '1'\n        }, onTransitionEnd: onTransitionEnd, children: [_jsxs(Flex, { item: { grow: 1 }, as: StyledToastContent, children: [content, hasProp(restProps, 'href') ? (_jsxs(_Fragment, { children: [' ', _jsxs(Link, { href: restProps.href, children: [\"(\", id, \"): \", restProps.label] })] })) : undefined] }), _jsxs(Flex, { container: { inline: true, justify: 'end', gap: 0.5 }, children: [_jsx(Keyboard, { keyName: 'Alt' }), _jsx(Keyboard, { keyName: 'Enter' })] }), _jsx(Button, { as: StyledToastButton, variant: 'simple', onClick: dismiss(false), icon: true, \"aria-label\": t('dismiss_label'), children: _jsx(Icon, { name: 'times' }) })] }));\n});\nconst Toaster = ({ testId, children, dismissAfter = Infinity, onDismiss }) => {\n    const { portalTarget } = useConfiguration();\n    const [messages, dispatch] = useReducer(reducer, []);\n    const [yOffsets, setYOffsets] = useState([]);\n    const heightHashRef = useRef({});\n    const testIds = useTestIds(testId, getToasterTestIds);\n    // This effect will cause a re-render with a translateY value set for each toast.\n    useLayoutEffect(() => {\n        const heights = [...messages].reverse().map(({ id }) => heightHashRef.current[id]);\n        setYOffsets(heights\n            .map((_, i) => heights.slice(0, i + 1).reduce((sum, cur) => sum + cur + 4, 0))\n            .reverse());\n    }, [messages.length]);\n    const providerValue = useMemo(() => ({\n        push(incoming) {\n            const message = {\n                ...incoming,\n                id: incoming.id ?? createUID(),\n                dismissAfter: hasProp(incoming, 'href') ? 10000 : incoming.dismissAfter\n            };\n            dispatch({\n                type: 'push',\n                payload: message\n            });\n        },\n        initialized: true\n    }), []);\n    // Don't create additional ToasterContext.Providers.\n    const context = windowIsAvailable\n        ? window.cosmos.toasterContext ?? ToasterContext\n        : ToasterContext;\n    const priorCtx = useContext(context);\n    if (priorCtx.initialized) {\n        return _jsx(context.Provider, { value: priorCtx, children: children });\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(context.Provider, { value: providerValue, children: children }), !!messages.length &&\n                portalTarget &&\n                createPortal(_jsx(StyledToaster, { \"data-testid\": testIds.root, children: messages.map((message, i) => {\n                        const sharedProps = {\n                            translateY: yOffsets[i] ?? 0,\n                            firstToast: i === 0,\n                            topLevelDismiss: onDismiss,\n                            dispatch,\n                            ref: el => {\n                                if (el) {\n                                    heightHashRef.current[message.id] = el.offsetHeight;\n                                }\n                                else {\n                                    delete heightHashRef.current[message.id];\n                                }\n                            }\n                        };\n                        if (hasProp(message, 'href')) {\n                            return (\n                            // Toast with Link\n                            _createElement(Toast, { \"data-testid\": testIds.toast, ...message, ...sharedProps, key: message.id }));\n                        }\n                        return (\n                        // Base Toast\n                        _createElement(Toast, { \"data-testid\": testIds.toast, ...message, ...sharedProps, dismissAfter: message.dismissAfter ?? dismissAfter, key: message.id }));\n                    }) }), portalTarget)] }));\n};\nexport default withTestIds(Toaster, getToasterTestIds);\n//# sourceMappingURL=Toaster.js.map","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { keyframes, css } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getCircularProgressUtilityClass } from './circularProgressClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SIZE = 44;\nconst circularRotateKeyframe = keyframes(_t || (_t = _`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`));\nconst circularDashKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`));\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color,\n    disableShrink\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`],\n    svg: ['svg'],\n    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']\n  };\n  return composeClasses(slots, getCircularProgressUtilityClass, classes);\n};\nconst CircularProgressRoot = styled('span', {\n  name: 'MuiCircularProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-block'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('transform')\n}, ownerState.color !== 'inherit' && {\n  color: (theme.vars || theme).palette[ownerState.color].main\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && css(_t3 || (_t3 = _`\n      animation: ${0} 1.4s linear infinite;\n    `), circularRotateKeyframe));\nconst CircularProgressSVG = styled('svg', {\n  name: 'MuiCircularProgress',\n  slot: 'Svg',\n  overridesResolver: (props, styles) => styles.svg\n})({\n  display: 'block' // Keeps the progress centered\n});\nconst CircularProgressCircle = styled('circle', {\n  name: 'MuiCircularProgress',\n  slot: 'Circle',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  stroke: 'currentColor'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('stroke-dashoffset')\n}, ownerState.variant === 'indeterminate' && {\n  // Some default value that looks fine waiting for the animation to kicks in.\n  strokeDasharray: '80px, 200px',\n  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4 || (_t4 = _`\n      animation: ${0} 1.4s ease-in-out infinite;\n    `), circularDashKeyframe));\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCircularProgress'\n  });\n  const {\n      className,\n      color = 'primary',\n      disableShrink = false,\n      size = 40,\n      style,\n      thickness = 3.6,\n      value = 0,\n      variant = 'indeterminate'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disableShrink,\n    size,\n    thickness,\n    value,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n  if (variant === 'determinate') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n  return /*#__PURE__*/_jsx(CircularProgressRoot, _extends({\n    className: clsx(classes.root, className),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, style),\n    ownerState: ownerState,\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other, {\n    children: /*#__PURE__*/_jsx(CircularProgressSVG, {\n      className: classes.svg,\n      ownerState: ownerState,\n      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,\n      children: /*#__PURE__*/_jsx(CircularProgressCircle, {\n        className: classes.circle,\n        style: circleStyle,\n        ownerState: ownerState,\n        cx: SIZE,\n        cy: SIZE,\n        r: (SIZE - thickness) / 2,\n        fill: \"none\",\n        strokeWidth: thickness\n      })\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, for example '3rem'.\n   * @default 40\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate'])\n} : void 0;\nexport default CircularProgress;"],"names":[],"sourceRoot":""}